{"name": "test_sales_module[getData2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Pass' == 'False'\n  - False\n  + Pass", "trace": "self = <tests.test_sales_creation.TestSalesModule object at 0x055FD3B0>\ngetData = {'customername': 'Azure', 'downpayment': 12, 'expected': 'Pass', 'paymentterms': 'Immediate Payment', ...}\n\n    @pytest.mark.order(1)\n    def test_sales_module(self, getData):\n        driver = self.driver\n        driver.get(TestData.BASE_URL)\n        driver.maximize_window()\n    \n        loginpage = LoginPage(driver)\n    \n        homepage = loginpage.do_valid_login(TestData.USERNAME, TestData.PASSWORD)\n        self.logger.info('Logged In Successfully')\n    \n        homepage.click_allapps()\n        salesmodulepage = homepage.select_module()\n        # homepage.select_module()\n        salesorderpage = salesmodulepage.navigate_to_sales_order()\n    \n        salesorderpage.click_create_btn()\n        statusList = salesorderpage.select_customer(getData['customername'])\n        if statusList[0] is not True & statusList[1] is not False:\n            self.logger.info('Customer Not found')\n        else:\n            salesorderpage.select_validity(getData['validity'])\n            salesorderpage.add_product(getData['product1'])\n    \n            salesorderpage.select_payment_terms(getData['paymentterms'])\n            salesorderpage.click_confirm()\n            # time.sleep(10)\n    \n        if salesorderpage.isTitleNew() is False:\n            if getData['expected'] == 'Pass':\n                self.logger.info('Record Created Successfully')\n                salesorderpage.open_sales_list()\n                salesorderpage.click_on_created_order()\n                salesorderpage.click_cancel()\n                salesorderpage.click_actions_and_delete()\n                self.logger.info('Record Deleted Successfully')\n                TestData.write_result('Pass', 'Pass')\n                self.testStatus.append('True')\n            elif getData['expected'] == 'Fail':\n                # This condition executes at application error\n                self.logger.info('Application error')\n                TestData.write_result('Pass', 'Fail')\n                self.testStatus.append('False')\n        elif salesorderpage.isTitleNew() is True:\n            if getData['expected'] == 'Pass':\n                # This condition executes at application error\n                self.logger.info('Application error')\n                TestData.write_result('Fail', 'Fail')\n                self.testStatus.append('False')\n            elif getData['expected'] == 'Fail':\n                self.logger.info('Record creation failed successfully')\n                TestData.write_result('Fail', 'Pass')\n                self.testStatus.append('True')\n        homepage.do_logout()\n        self.logger.info('Logged Out Successfully')\n        print('********************')\n        print(self.testStatus[-1])\n        print('********************')\n>       assert 'Pass' == self.testStatus[-1]\nE       AssertionError: assert 'Pass' == 'False'\nE         - False\nE         + Pass\n\ntests\\test_sales_creation.py:74: AssertionError"}, "attachments": [{"name": "credentials_filled", "source": "76fead58-d804-4839-aaae-2f258a6192b7-attachment.png", "type": "image/png"}, {"name": "successfully_logged_in", "source": "d242510f-d95f-49c5-add2-e9908c05e7ea-attachment.png", "type": "image/png"}, {"name": "opened_sales_app", "source": "45d28577-cd1e-4d53-974b-7828e7bae9c9-attachment.png", "type": "image/png"}, {"name": "sales_order_page", "source": "70f24a3e-724e-4904-a280-3427fdf7ccaf-attachment.png", "type": "image/png"}, {"name": "tests/test_sales_creation.py::TestSalesModule::test_sales_module[getData2]", "source": "36388ab6-e26f-4d4d-add5-3a881a8e8ef2-attachment.png", "type": "image/png"}, {"name": "log", "source": "40a9877b-7030-48ab-8421-404d1561d0cb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "getData", "value": "{'customername': 'Azure', 'validity': datetime.datetime(2021, 12, 28, 0, 0), 'product1': 'Laptop', 'product2': 'Headset', 'product3': 'Pendrive', 'paymentterms': 'Immediate Payment', 'downpayment': 12, 'expected': 'Pass'}"}], "start": 1621578523275, "stop": 1621578567228, "uuid": "1c17a5d4-4a03-49ba-a588-56b2f94e09d4", "historyId": "0ff93f0168b34a0f8d8be2adcadcaeb9", "testCaseId": "1e63c2487ade2c5e7039d82648e1820b", "fullName": "tests.test_sales_creation.TestSalesModule#test_sales_module", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "order(1)"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sales_creation"}, {"name": "subSuite", "value": "TestSalesModule"}, {"name": "host", "value": "DESKTOP-EU8OBTK"}, {"name": "thread", "value": "13080-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sales_creation"}]}